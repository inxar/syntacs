% -*-texinfo-*-
\input texinfo

@c %**start of header
@setfilename lexer.info
@settitle Lexer Transition Diagram
@setchapternewpage odd
@c %**end of header

@c
@c $Id: lexerman.texinfo,v 1.1.1.1 2001/07/06 09:08:04 pcj Exp $
@c
@c Copyright (C) 2001 Paul Cody Johnston - pcj@inxar.org
@c
@c This program is free software; you can redistribute it and/or modify
@c it under the terms of the GNU General Public License as published by
@c the Free Software Foundation; either version 2 of the License, or (at
@c your option) any later version.
@c
@c This program is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@c General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with this program; if not, write to the Free Software
@c Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
@c USA.  
@c

@ifinfo
This document describes the behavior of the lexer using a transition
diagram.

Copyright @copyright{} 2001 Paul Cody Johnston, inxar.org.
@end ifinfo


@titlepage
@title Lexer Internals
@subtitle A Transition Diagram

@author Paul Cody Johnston

@page
@vskip 0pt plus 1fill
@end titlepage

@node Top, Introduction, (dir), (dir)

This document describes the behavior of the lexer using a transition
diagram.

@menu
* Introduction::                
* Instantaneous States::        
* Transition Diagram::          
@end menu

@c =====================================================================
 
@node Introduction, Instantaneous States, Top, Top
@chapter Introduction

This document describes the behavior of the lexing function.  A
transition diagram helps provide a more formal characterization.  To aid
in the discussion, variables and functions are used.  This reading is
NOT REQUIRED for general use of the STT.

@section Variables

Variables are written like shell or perl variables within text for
contrast.  For example: the value of @code{$x} is
@code{1}.

@table @code
@item m,n
Offsets used to describe the beginning and end of a token.

@item m',n'
Offsets used to describe the beginning and end of an error.

@item p,q
DFA states.  In general, @code{$p} denotes current state and @code{$q}
denotes the next state.

@item dead
A special DFA state in which all roads lead back to itself.

@item i
An offset in the input.

@item t
A symbol which uniquely identifies a token.

@item err
A special token symbol which indicates an error.

@item c
An input character.

@end table

@section Functions

Functions are written in all UPPERCASE.

@table @code
@item RETCH
The input char accessor function (RETurn CHar); a mapping from @code{$i}
to @code{$c}.

@item GOTO
The dfa transition function; a mapping from @code{($p,$c)} to @code{$q}.

@item OUTPUT
The dfa output function; a mapping from @code{$p} to @code{$t}.
@end table

@section Visual Notation

A transition diagram can be used to formally describe the lexer.  This
directed graph characterizes what is known about the the character
sequence to the immediate left of the input cursor.  In this context,
@dfn{immediate left} refers to a closed interval @code{[$m,$n]} in the
input such that the beginning of the interval is at offset @code{$m},
the end of the interval is at offset @code{$n}, and the cursor is
between offset @code{$n} and @code{${n+1}}.  This can be drawn
(@dfn{vis} means @dfn{visually}):

@example
vis: |-----------)
      m         n
@end example

@section Special Symbols

@subsection Epoch: `|'

The pipe character @code{"|"} denotes all the input before the interval
being immediately considered.  It includes all the tokens that have
already been characterized, or nothing (if the parse has just started).
Because it shows the starting point of an character interval currently
being lexically analyzed, it is referred to as @dfn{epoch}.

@subsection Horizon: `)'

The parenthesis @code{")"} denotes the cursor, or the frontier
of the input.  Because this shows the leading edge of the known lexing
universe, it is referred to as @dfn{horizon}.

@section Character Symbols

Each character between the epoch and horizon denotes a single input
character at offset @code{$i}.  

@subsection Live Input Character: `-'

If @code{$c = RETCH($i)}, @code{$q = GOTO($p,$c)}, and
@code{$q} is not @code{$dead}, then the character is drawn
as a dash (@code{"-"}).  Therefore, a dash is used to indicate a
character that did not move the DFA to the dead state, referred to as
a @dfn{live char}.

@subsection Dead Input Character: `*'

If the converse is true, that is, if @code{$c = RETCH($i)} and
@code{$dead = GOTO($p,$c)}, then the character is drawn as an asterisk
(@code{"*"}).  Therefore, an asterisk is used to indicate a character
that killed the DFA, also called a @dfn{dead char}.

@subsection Accepting Input Character: `='

Moreover, if @code{$c = RETCH($i)}, @code{$q = GOTO($p,$c)}, @code{$t =
OUTPUT($q)}, and @code{$t} is not @code{$err}, then the character is
drawn as an equals sign (@code{"="}) rather than a dash.  Therefore, an
equals sign is used to indicate a character which signals the DFA to
accept, hence the label @dfn{accepting char}.  Note that an accepting
char does not necessarily indicate the end-boundary of a token.

@node Instantaneous States, Transition Diagram, Introduction, Top
@chapter Instantaneous States

This section describes the state of the lexer at each state in the
transition diagram.

@section Tabla-Rasa

In the @dfn{tabla-rasa} state (or @dfn{start state}), the lexer is at
epoch.  This means that either the translation run has just started or
that the lexer has just completed the recognition of a token and the
cycle has begun anew.

@example
vis: |
@end example

Without consuming any input, the lexer immediately moves from
@dfn{tabla-rasa} to @dfn{pluripotent}.

@section Pluripotent

In the @dfn{pluripotent} lexer state, input traversal has proceeded such
that the DFA has not transitioned to the dead state, but no output has
been reported from the DFA either.  This means that not enough input has
been to decide whether the sequence is good or bad (is a token or is an
error).  Therefore, the state is "pluripotent".

@example
vis: |-----)
@end example

@section Open Token

If the lexer is @dfn{pluripotent}, @code{$q = GOTO($p,$c)}, and @code{$t
= OUTPUT($q)}, then the lexer transitions to the @dfn{open token state}.
In this state, it has become certain that the interval represents a
token, but it is uncertain whether the interval represents the longest
possible match; more input must be seen to decide.  

@example
vis: |-------=)
      m      n?
@end example

@section Closed Token

If the lexer is in the @dfn{open token state} and the next input char
transitions to @code{$dead}, then the lexer transitions to the
@dfn{closed token state}; the end-boundary of the token is now known.
At this point the @code{LexerListener} is notified of the matched token
at offset @code{$m} and length @code{$n - $m + 1}.  

@example
vis: |-------=*)
      m      n

vis: |-------=----*)
      m      n

vis: |-------=-----==-*)
      m             n
@end example

Without consuming any input, the lexer then immediately moves back to
@dfn{tabla-rasa} and the cycle begins again.

@section Pheonix Token

If the lexer is in the @dfn{open token} state and the lext input is
@dfn{live}, it moves to the @dfn{phoenix token} state.  When this
happens, the lexer says "Well, I know that I will at least be able to
match token @code{$t} back at the last accepting char.  However, I
haven't yet hit a dead state, so I can't say for certain where the end
of the token is quite yet.  But since I have now just seen a live char,
the identity of the token that is matched could change".  This would be
the case with a grammar that has regular expressions matching
@file{hour} and @file{hourglass}.

Therefore, the pheonix token state represents a situation where a token
@dfn{y} may "rise out" of the sequence matching token @dfn{x}.

@example
vis: |-------=---)
      m      n?
@end example

@section Open Error

Analogous to @dfn{open token}, the @dfn{open error} state occurrs when
the lexer is in the @dfn{pluripotent} state and the next input char
takes the DFA to @code{$dead}.  It has become certain that the input
interval is not recognized by the DFA, but it is not known whether this
represents the longest possible error.  Since the lexer is designed to
try to "match" the longest possible error before notifying the listener,
more input needs to be analyzed.

@example
vis: |------*)
      m'    n'?

vis: |------***---)
      m'      n'  ?

vis: |------***-----*)
      m'            n'?
@end example

@section Closed Error

If the lexer is in the @dfn{open error state} and the next input
character is an @dfn{accepting char}, then the lexer moves to the
@dfn{closed error state}; it is certain that a token will be matched and
therefore can be concluded that end-boundary of the error is at
@code{$n'}.

@example
vis: |------*-=)
      m'    n'
             mn?

vis: |*********-----=)
      m'      n'
               m    n?
@end example

When the lexer moves to @dfn{closed error}, it then immediately
transitions to @dfn{open token} since it has become certain that a token
will be matched.

@section Pheonix Error

The @dfn{pheonix} error is very similar to the @dfn{open token} state
--- when an accepting char is traversed the extent of the error sequence
will become known and the lexer will move into the @dfn{closed error}
state.  The @dfn{phoenix error} is a bit special however. When the
transition from @dfn{open error} to @dfn{phoenix error} is actuated over
a live char, the beginning of token marker is set.  Therefore, when this
state transition occurrs, the lexer can say "if we end by finding a
token, here's where it starts."

From @dfn{phoenix error}, the lexer can move back into @dfn{open error}
in which case the beginning-of-token marker that was set becomes unset

As you know, the phoenix is a mythical bird that rose from the embers of
its own ashes.  Analogously, the @dfn{pheonix state} marks the starting
point where a token may rise out of the ashes of an error.

@example
vis: |------*-)
      m'    n'?
             m
@end example

@node  Transition Diagram,  , Instantaneous States, Top
@chapter Transition Diagram

This section illutrates the transition diagram drawn as a directed
graph.  The actions that are performed by edge traversal are shown
below.

@image{lexer,,}

@example

                    /\   *    /\  
           .-----> <ct> ---> <tr> 
           |        \/        \/  
      dead |                         
           |         ^         | *
           |    dead |         v    
                                 
     .--  /\  live  /\        /\  __.
live |   <pt> <--- <ot> <--- <pl>   | live
     `->  \/  --->  \/   acc  \/  <-'
              acc                         
                     ^         | dead
                   * |         v     
                                       
                    /\        /\  __. 
                   <ce> <--- <oe>   | dead
                    \/   acc  \/  <-' 
                                  
                     ^        ^| live
                 acc |   dead |v
                     |
                     |        /\  __.
                     `------ <pe>   | live
                              \/  <-'

 -- nodes          

     tr: tabla-rasa   
     pl: pluripotent  
     ot: open-token   
     pt: phoenix-token
     ct: closed-token 
     oe: open-error   
     pe: pheonix-error
     ce: closed-error 

 -- edges 

     *:    automatic (epsilon, no input consumed)
     live: live-char
     dead: dead-char
     acc:  accepting-char

@end example


















