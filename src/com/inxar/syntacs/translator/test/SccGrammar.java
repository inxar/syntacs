/**
 * Copyright (C) 2001 Paul Cody Johnston - pcj@inxar.org
 * @author Paul Cody Johnston - pcj@inxar.org
 */
package com.inxar.syntacs.translator.test;

import org.inxar.syntacs.translator.Translator;
import org.inxar.syntacs.translator.lr.LRTranslator;
import org.inxar.syntacs.translator.lr.LRTranslatorGrammar;
import org.inxar.syntacs.util.IntArray;
import com.inxar.syntacs.util.ArrayIntArray;
import org.inxar.syntacs.automaton.finite.DFA;
import org.inxar.syntacs.analyzer.Input;
import org.inxar.syntacs.analyzer.lexical.Lexer;
import org.inxar.syntacs.analyzer.syntactic.Parser;
import org.inxar.syntacs.translator.lr.LRTranslatorInterpreter;
import java.util.Properties;

/**
 * Automatically generated by <a href='http://www.inxar.org/syntacs'>Syntacs
 *  Translation Toolkit</a> on Fri Jul 06 12:05:04 PDT 2001<P><PRE># GRAMMAR
 *  DECLARATION
 * this is scc version 0.0.1;
 * 
 * # PROPERTY DEFINITIONS
 * property viz-namespace = "scc";
 * property viz-syntactic = "true";
 * property author-email = "pcj@inxar.org";
 * property author = "Paul Cody Johnston";
 * property viz-sourcepath = "./grammar";
 * property viz-lexical = "true";
 * property compile-namespace = "com.inxar.syntacs.translator.test";
 * property compile-dpa-constructor-method = "LALR1";
 * property compile-sourcepath = "./src";
 * 
 * # TERMINAL DECLARATIONS
 * terminal c;
 * terminal d;
 * 
 * # TERMINAL DEFINITIONS
 * c matches "c";
 * d matches "d";
 * 
 * # NONTERMINAL DECLARATIONS
 * nonterminal Goal;
 * nonterminal S;
 * nonterminal C;
 * 
 * # NONTERMINAL DEFINITIONS
 * reduce Goal when S;
 * reduce S when C C;
 * reduce C when c C;
 * reduce C when d;
 * 
 * accept when Goal;
 * 
 * # CONTEXT DECLARATIONS
 * context default;
 * 
 * # CONTEXT DEFINITIONS
 * default includes c, d;
 * 
 * start in context default;
 * 
 * </PRE>
 */
public class SccGrammar
implements LRTranslatorGrammar
{
    
    /**
     * Constant ID for default
     */
    public static final int C_default = 0;
    
    /**
     * Terminal ID for c
     */
    public static final int T_c = 1;
    
    /**
     * Terminal ID for d
     */
    public static final int T_d = 2;
    
    /**
     * NonTerminal ID for Goal
     */
    public static final int N_Goal = 3;
    
    /**
     * NonTerminal ID for S
     */
    public static final int N_S = 4;
    
    /**
     * NonTerminal ID for C
     */
    public static final int N_C = 5;
    
    /**
     * Production ID for Goal__S
     */
    public static final int P_Goal__S = 0;
    
    /**
     * Production ID for S__C_C
     */
    public static final int P_S__C_C = 1;
    
    /**
     * Production ID for C__c_C
     */
    public static final int P_C__c_C = 2;
    
    /**
     * Production ID for C__d
     */
    public static final int P_C__d = 3;
    
    public String getContext(int ID)
    {
        switch (ID) {
            case 0: {
                return "default";
            } 
            default: {
                return null;
            } 
        } 
    }
    
    public int getContextAction(int cID, int tID)
    {
        switch (cID) {
            case 0: {
                return getDefaultContextAction(tID);
            } 
            default: {
                return -2147483647;
            } 
        } 
    }
    
    public int getContextRegister(int cID, int tID)
    {
        switch (cID) {
            case 0: {
                return getDefaultContextRegister(tID);
            } 
            default: {
                return -2147483647;
            } 
        } 
    }
    
    public IntArray getContextTerminals(int ID)
    {
        switch (ID) {
            case 0: {
                return new ArrayIntArray(contextTerminals[0]);
            } 
            default: {
                return null;
            } 
        } 
    }
    
    public IntArray getContexts()
    {
        return contexts;
    }
    
    public int getGoalNonTerminal()
    {
        return 3;
    }
    
    public String getName()
    {
        return "scc";
    }
    
    public String getNonTerminal(int ID)
    {
        switch (ID) {
            case 3: {
                return "Goal";
            } 
            case 4: {
                return "S";
            } 
            case 5: {
                return "C";
            } 
            default: {
                return null;
            } 
        } 
    }
    
    public IntArray getNonTerminals()
    {
        return nonTerminals;
    }
    
    public String getProduction(int ID)
    {
        switch (ID) {
            case 0: {
                return "Goal: S";
            } 
            case 1: {
                return "S: C C";
            } 
            case 2: {
                return "C: c C";
            } 
            case 3: {
                return "C: d";
            } 
            default: {
                return null;
            } 
        } 
    }
    
    public int getProductionLength(int ID)
    {
        switch (ID) {
            case 0: {
                return 1;
            } 
            case 1: {
                return 2;
            } 
            case 2: {
                return 2;
            } 
            case 3: {
                return 1;
            } 
            default: {
                return -2147483644;
            } 
        } 
    }
    
    public int getProductionNonTerminal(int ID)
    {
        switch (ID) {
            case 0: {
                return 3;
            } 
            case 1: {
                return 4;
            } 
            case 2: {
                return 5;
            } 
            case 3: {
                return 5;
            } 
            default: {
                return -2147483644;
            } 
        } 
    }
    
    public IntArray getProductionSymbols(int ID)
    {
        switch (ID) {
            case 0: {
                return new ArrayIntArray(productionSymbols[0]);
            } 
            case 1: {
                return new ArrayIntArray(productionSymbols[1]);
            } 
            case 2: {
                return new ArrayIntArray(productionSymbols[2]);
            } 
            case 3: {
                return new ArrayIntArray(productionSymbols[3]);
            } 
            default: {
                return null;
            } 
        } 
    }
    
    public IntArray getProductions()
    {
        return productions;
    }
    
    public int getStartContext()
    {
        return 0;
    }
    
    public String getTerminal(int ID)
    {
        switch (ID) {
            case 1: {
                return "c";
            } 
            case 2: {
                return "d";
            } 
            default: {
                return null;
            } 
        } 
    }
    
    public IntArray getTerminalContexts(int ID)
    {
        switch (ID) {
            case 1: {
                return new ArrayIntArray(terminalContexts[0]);
            } 
            case 2: {
                return new ArrayIntArray(terminalContexts[1]);
            } 
            default: {
                return null;
            } 
        } 
    }
    
    public Object getTerminalRegexp(int ID)
    {
        switch (ID) {
            case 1: {
                return "c";
            } 
            case 2: {
                return "d";
            } 
            default: {
                return null;
            } 
        } 
    }
    
    public IntArray getTerminals()
    {
        return terminals;
    }
    
    public String getVersion()
    {
        return "0.0.1";
    }
    
    public Translator newTranslator()
    {
        return newTranslator(null);
    }
    
    public Translator newTranslator(Properties p)
    {
        LRTranslator t = new com.inxar.syntacs.translator.lr.StandardLRTranslator();
        t.setLRTranslatorGrammar(this);
        t.setProperties(p);
        Input input = new com.inxar.syntacs.analyzer.StandardInput();
        t.setInput(input);
        Lexer lexer = new com.inxar.syntacs.analyzer.lexical.StandardLexer();
        t.setLexer(lexer);
        Parser parser = new com.inxar.syntacs.analyzer.syntactic.StandardParser();
        t.setParser(parser);
        LRTranslatorInterpreter interp = new com.inxar.syntacs.translator.lr.StandardLRTranslatorInterpreter();
        t.setLRTranslatorInterpreter(interp);
        lexer.initialize(new DFA[]{new SccDefaultDFA()});
        parser.initialize(new SccDPA());
        return t;
    }
    
    private int getDefaultContextAction(int tID)
    {
        switch (tID) {
            case 2: {
            }
            case 1: {
                return 1;
            } 
            default: {
                return -2147483646;
            } 
        } 
    }
    
    private int getDefaultContextRegister(int tID)
    {
        switch (tID) {
            case 2: {
            }
            case 1: {
                return 0;
            } 
            default: {
                return -2147483646;
            } 
        } 
    }
    private int[][] contextTerminals = new int[][]{{1, 2}};
    private IntArray contexts = new ArrayIntArray(new int[]{0});
    private IntArray nonTerminals = new ArrayIntArray(new int[]{3, 4, 5});
    private int[][] productionSymbols = new int[][]{{4}, {5, 5}, {1, 5}, {2}};
    private IntArray productions = new ArrayIntArray(new int[]{0, 1, 2, 3});
    private int[][] terminalContexts = new int[][]{{0}, {0}};
    private IntArray terminals = new ArrayIntArray(new int[]{1, 2});
}